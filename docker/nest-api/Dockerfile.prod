# Multi-stage build for production optimization
FROM node:22.13.1-slim AS builder

WORKDIR /usr/src/app

# Install dependencies needed for building
RUN apt-get update && apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    build-essential && \
    curl --proto "=https" -sLf --retry 3 --tlsv1.2 'https://packages.doppler.com/public/cli/gpg.DE2A7741A397C129.key' | \
    gpg --dearmor -o /usr/share/keyrings/doppler-archive-keyring.gpg && \
    echo "deb [signed-by=/usr/share/keyrings/doppler-archive-keyring.gpg] https://packages.doppler.com/public/cli/deb/debian any-version main" | \
    tee /etc/apt/sources.list.d/doppler-cli.list && \
    apt-get update && \
    apt --no-install-recommends install -y doppler && \
    rm -rf /var/lib/apt/lists/*

# Install pnpm
RUN npm i -g pnpm && npm uninstall -g npm

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Install dependencies (including dev dependencies for build)
RUN pnpm install

# Copy source code
COPY . ./

# Generate Prisma Client
RUN pnpm prisma generate

# Build the application
RUN pnpm build

# Remove dev dependencies
RUN pnpm prune --prod

# ============================================
# Production stage
# ============================================
FROM node:22.13.1-slim AS production

WORKDIR /usr/src/app

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    dumb-init && \
    curl --proto "=https" -sLf --retry 3 --tlsv1.2 'https://packages.doppler.com/public/cli/gpg.DE2A7741A397C129.key' | \
    gpg --dearmor -o /usr/share/keyrings/doppler-archive-keyring.gpg && \
    echo "deb [signed-by=/usr/share/keyrings/doppler-archive-keyring.gpg] https://packages.doppler.com/public/cli/deb/debian any-version main" | \
    tee /etc/apt/sources.list.d/doppler-cli.list && \
    apt-get update && \
    apt --no-install-recommends install -y doppler && \
    rm -rf /var/lib/apt/lists/*

# Install pnpm
RUN npm i -g pnpm && npm uninstall -g npm

# Create non-root user
RUN groupadd -r nodejs && useradd -r -g nodejs nodejs

# Copy built artifacts from builder
COPY --from=builder --chown=nodejs:nodejs /usr/src/app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /usr/src/app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /usr/src/app/package.json ./
COPY --from=builder --chown=nodejs:nodejs /usr/src/app/prisma ./prisma

# Create writable directories for the app
RUN mkdir -p /usr/src/app/logs && chown -R nodejs:nodejs /usr/src/app/logs

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 2424

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application with Doppler
CMD ["doppler", "run", "--", "node", "dist/main"]

