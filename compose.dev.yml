# Development environment configuration
# Usage: docker compose -f compose.dev.yml up --build

services:
  ludora-api:
    build:
      context: .
      dockerfile: docker/nest-api/Dockerfile.dev
    container_name: ludora-api
    restart: 'no' # Don't restart in dev for easier debugging
    ports:
      - '2424:2424' # API port
      - '5555:5555' # Prisma Studio port
      - '9229:9229' # Node.js debugging port
    volumes:
      - ./src:/usr/src/app/src
      - ./prisma:/usr/src/app/prisma
      - ./test:/usr/src/app/test
      # Exclude node_modules for performance
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - DOPPLER_TOKEN
    command: ['sh', 'scripts/start-dev.sh']
    networks:
      - ludora-network
      - traefik
    depends_on:
      - ludora-db
    # Add healthcheck to ensure API is ready
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:2424/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Add development-specific labels
    labels:
      - 'dev.environment=development'
      - 'traefik.enable=true'
      - 'traefik.docker.network=traefik'
      - 'traefik.http.routers.ludora-api.rule=Host(`ludora-api.gana-f4ll.fr`)'
      - 'traefik.http.routers.ludora-api.entrypoints=websecure'
      - 'traefik.http.routers.ludora-api.tls=true'
      - 'traefik.http.routers.ludora-api.tls.certresolver=myresolver'
      - 'traefik.http.services.ludora-api.loadbalancer.server.port=2424'

  ludora-db:
    build:
      context: .
      dockerfile: docker/postgres/Dockerfile
    restart: 'no'
    ports:
      - '5432:5432' # Expose DB port for local connections
    environment:
      - POSTGRES_LOG_STATEMENT=all # Enable query logging in dev
      - DOPPLER_TOKEN
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - ludora-network
    labels:
      - 'traefik.enable=false'
  # Include Grafana in development for monitoring
  ludora-grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana-dev
    restart: 'no'
    user: '0'
    environment:
      - GF_SERVER_ROOT_URL=https://grafana.gana-f4ll.fr
      - GF_SECURITY_ADMIN_PASSWORD=admin # Simple password for dev
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - ludora-network
      - traefik
    # Add Traefik labels for secure access
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.grafana-dev.rule=Host(`grafana.gana-f4ll.fr`)'
      - 'traefik.http.routers.grafana-dev.entrypoints=websecure'
      - 'traefik.http.routers.grafana-dev.tls.certresolver=myresolver'
      - 'traefik.http.services.grafana-dev.loadbalancer.server.port=3000'
  ludora-prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-dev
    restart: 'no'
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - ludora-network
      - traefik
    # Add Traefik labels for secure access
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.prometheus-dev.rule=Host(`prometheus.gana-f4ll.fr`)'
      - 'traefik.http.routers.prometheus-dev.entrypoints=websecure'
      - 'traefik.http.routers.prometheus-dev.tls.certresolver=myresolver'
      - 'traefik.http.services.prometheus-dev.loadbalancer.server.port=9090'
    # Add development-specific configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--log.level=debug' # More verbose logging in dev

volumes:
  postgres-data:
  grafana-data:
  prometheus-data:

networks:
  ludora-network:
    driver: bridge
  traefik:
    external: true
