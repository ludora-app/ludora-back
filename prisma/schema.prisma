generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "ratings", "infrastructure", "sessions", "social", "shared"]
}

enum Provider {
  FACEBOOK
  GOOGLE
  LUDORA

  @@schema("auth")
}

enum Sex {
  MALE
  FEMALE
  OTHER

  @@schema("auth")
}

enum User_type {
  USER
  ADMIN

  @@schema("auth")
}

enum Invitation_status {
  PENDING
  ACCEPTED
  REJECTED

  @@schema("shared")
}

enum Team_label {
  A
  B

  @@schema("sessions")
}

enum Message_status {
  SENT
  DELIVERED
  READ

  @@schema("social")
}

enum Message_type {
  TEXT
  IMAGE
  VIDEO
  AUDIO

  @@schema("social")
}

enum Conversation_type {
  PRIVATE
  GROUP
  EVENT

  @@schema("social")
}

enum Game_modes {
  TWO_V_TWO
  THREE_V_THREE
  FOUR_V_FOUR
  FIVE_V_FIVE
  SIX_V_SIX
  SEVEN_V_SEVEN
  EIGHT_V_EIGHT
  TEN_V_TEN
  ELEVEN_V_ELEVEN

  @@schema("sessions")
}

enum Day_of_week {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY

  @@schema("infrastructure")
}

model Users {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String?
  firstname         String?
  lastname          String?
  birthdate         DateTime?
  sex               Sex?      @map("sex")
  phone             String?
  image_url         String?
  bio               String?
  provider          Provider  @default(LUDORA)
  is_connected      Boolean   @default(true) //? ça sert à quoi ?
  stripe_account_id String?   @unique
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  email_verified    Boolean   @default(false)
  type              User_type @default(USER) @map("type")

  Message             Messages[]
  // Event               Events[]
  Conversation_member Conversation_members[]
  // Get_notification    Get_notifications[]

  Friends_sent     Friends[] @relation("friend1")
  Friends_received Friends[] @relation("friend2")

  Conversation_options Conversation_options[]

  Session_invitations Session_invitations[]

  Session_players Session_players[]

  Evaluator_rating User_ratings[] @relation(name: "EvaluatorRelation")

  Evaluated_rating User_ratings[] @relation(name: "EvaluatedRelation")

  User_global_rating User_global_ratings[]
  Email_verification Email_verification[]

  User_tokens User_tokens[]

  @@schema("auth")
}

model Email_verification {
  id         String   @id @default(cuid())
  user_id    String
  code       String
  expires_at DateTime
  created_at DateTime @default(now())

  user Users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@schema("auth")
}

model User_tokens {
  id         String   @id @default(cuid())
  user_id    String
  device_id  String?
  token      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user Users @relation(fields: [user_id], references: [id])

  @@schema("auth")
}

model User_ratings {
  evaluator_id String
  evaluated_id String
  note_1       Int
  note_2       Int
  note_3       Int
  note_4       Int
  note_5       Int
  // comment      String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  evaluator Users @relation(fields: [evaluator_id], references: [id], name: "EvaluatorRelation")
  evaluated Users @relation(fields: [evaluated_id], references: [id], name: "EvaluatedRelation")

  @@id([evaluator_id, evaluated_id])
  @@schema("ratings")
}

model User_global_ratings {
  user_id    String
  sport_name String
  rating     Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user  Users  @relation(fields: [user_id], references: [id])
  sport Sports @relation(fields: [sport_name], references: [name])

  @@id([user_id, sport_name])
  @@schema("ratings")
}

model Partners {
  id         String   @id @default(cuid())
  name       String
  image_url  String?
  address    String
  latitude   Float
  longitude  Float
  phone      String
  email      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Fields                Fields[]
  Partner_sports        Partner_sports[]
  Partner_opening_hours Partner_opening_hours[]

  @@schema("infrastructure")
}

model Partner_opening_hours {
  id          String      @id @default(cuid())
  partner_id  String
  day_of_week Day_of_week @map("day_of_week")
  open_time   String // Format "HH:MM"
  close_time  String // Format "HH:MM"
  is_closed   Boolean     @default(false)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  partner Partners @relation(fields: [partner_id], references: [id], onDelete: Cascade)

  @@unique([partner_id, day_of_week])
  @@schema("infrastructure")
}

model Partner_sports {
  partner_id String
  sport      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  partner        Partners @relation(fields: [partner_id], references: [id])
  sport_relation Sports   @relation(fields: [sport], references: [name])

  @@id([partner_id, sport])
  @@schema("infrastructure")
}

model Sports {
  id         String   @id @default(cuid())
  name       String   @unique
  image_url  String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Fields Fields[]

  User_global_rating User_global_ratings[]
  Partner_sports     Partner_sports[]

  @@schema("infrastructure")
}

model Fields {
  id         String     @id @default(cuid())
  sport      String
  partner_id String
  name       String?
  address    String
  latitude   Float
  longitude  Float
  entry_fee  Float
  game_mode  Game_modes @map("game_mode")

  Field_images   Field_images[]
  partner        Partners       @relation(fields: [partner_id], references: [id])
  sport_relation Sports         @relation(fields: [sport], references: [name])
  sessions       Sessions[]

  @@schema("infrastructure")
}

model Field_images {
  id         String   @id @default(cuid())
  field_id   String
  image_url  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  field Fields @relation(fields: [field_id], references: [id])

  @@schema("infrastructure")
}

model Sessions {
  id                   String     @id @default(cuid())
  field_id             String
  title                String
  start_date           DateTime
  end_date             DateTime
  sport                String
  game_mode            Game_modes @map("game_mode")
  // visibility        Visibility
  max_players_per_team Int
  max_teams_per_game   Int
  min_players_per_team Int
  min_teams_per_game   Int
  description          String?
  created_at           DateTime   @default(now())
  updated_at           DateTime   @updatedAt

  Session_invitations Session_invitations[]

  Session_images Session_images[]

  Session_teams Session_teams[]

  Session_players Session_players[]
  field           Fields            @relation(fields: [field_id], references: [id])

  @@schema("sessions")
}

model Session_invitations {
  session_id String
  user_id    String
  status     Invitation_status @default(PENDING)
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt

  session Sessions @relation(fields: [session_id], references: [id])
  user    Users    @relation(fields: [user_id], references: [id])

  @@id([session_id, user_id])
  @@schema("sessions")
}

model Session_images {
  id         String   @id @default(cuid())
  session_id String
  image_url  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  session Sessions @relation(fields: [session_id], references: [id])

  @@schema("sessions")
}

model Session_teams {
  id         String     @id @default(cuid())
  session_id String
  team_label Team_label
  team_name  String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  session Sessions @relation(fields: [session_id], references: [id])

  Session_players Session_players[]

  @@schema("sessions")
}

model Session_players {
  session_id String
  team_id    String
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  session Sessions      @relation(fields: [session_id], references: [id])
  team    Session_teams @relation(fields: [team_id], references: [id])
  user    Users         @relation(fields: [user_id], references: [id])

  @@id([session_id, team_id, user_id])
  @@schema("sessions")
}

model Conversations {
  id                  String                 @id @default(cuid())
  event_id            String?
  name                String?
  type                Conversation_type
  created_at          DateTime               @default(now())
  updated_at          DateTime               @updatedAt
  // todo: image_url
  Message             Messages[]
  Conversation_member Conversation_members[]

  Conversation_options Conversation_options[]

  @@schema("social")
}

model Messages {
  id              String         @id @default(cuid())
  conversation_id String
  sender_id       String
  content         String
  status          Message_status @default(SENT)
  type            Message_type
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt

  sender       Users         @relation(fields: [sender_id], references: [id])
  conversation Conversations @relation(fields: [conversation_id], references: [id])

  @@schema("social")
}

model Conversation_options {
  conversation_id String
  user_id         String
  is_admin        Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  archived        Boolean  @default(false)
  muted           Boolean  @default(false)
  deleted         Boolean  @default(false)

  user         Users         @relation(fields: [user_id], references: [id])
  conversation Conversations @relation(fields: [conversation_id], references: [id])

  @@unique([conversation_id, user_id])
  @@schema("social")
}

model Conversation_members {
  conversation_id String
  user_id         String
  is_admin        Boolean @default(false)

  conversation Conversations @relation(fields: [conversation_id], references: [id])
  user         Users         @relation(fields: [user_id], references: [id])

  @@id([conversation_id, user_id])
  @@schema("social")
}

model Friends {
  user_id1   String
  user_id2   String
  status     Invitation_status @map("status")
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  user1      Users             @relation("friend1", fields: [user_id1], references: [id])
  user2      Users             @relation("friend2", fields: [user_id2], references: [id])

  @@id([user_id1, user_id2])
  @@unique([user_id1, user_id2])
  @@schema("social")
}
