generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "ratings", "infrastructure", "sessions", "social", "shared"]
}

enum Provider {
  FACEBOOK
  GOOGLE
  LUDORA

  @@schema("auth")
}

enum Sex {
  MALE
  FEMALE
  OTHER

  @@schema("auth")
}

enum User_type {
  USER
  ADMIN

  @@schema("auth")
}

enum Invitation_status {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED

  @@schema("shared")
}

enum Team_label {
  A
  B

  @@schema("sessions")
}

enum Message_status {
  SENT
  DELIVERED
  READ

  @@schema("social")
}

enum Message_type {
  TEXT
  IMAGE
  VIDEO
  AUDIO

  @@schema("social")
}

enum Conversation_type {
  PRIVATE
  GROUP
  EVENT

  @@schema("social")
}

enum Game_modes {
  TWO_V_TWO
  THREE_V_THREE
  FOUR_V_FOUR
  FIVE_V_FIVE
  SIX_V_SIX
  SEVEN_V_SEVEN
  EIGHT_V_EIGHT
  TEN_V_TEN
  ELEVEN_V_ELEVEN

  @@schema("sessions")
}

model Users {
  uid              String    @id @default(cuid())
  email            String    @unique
  password         String?
  firstname        String?
  lastname         String?
  birthdate        DateTime?
  sex              Sex?      @map("sex")
  phone            String?
  imageUrl         String?   @map("image_url")
  bio              String?
  provider         Provider  @default(LUDORA)
  isConnected      Boolean   @default(true) @map("is_connected")
  stripeAccountUid String?   @unique @map("stripe_account_uid")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  emailVerified    Boolean   @default(false) @map("email_verified")
  type             User_type @default(USER) @map("type")

  messages            Messages[]
  // Event               Events[]
  conversationMembers ConversationMembers[]
  // Get_notification    Get_notifications[]

  friendsSent     Friends[] @relation("friend1")
  friendsReceived Friends[] @relation("friend2")

  conversationOptions ConversationOptions[]

  Sent_invitations     SessionInvitations[] @relation(name: "senderRelation")
  Received_invitations SessionInvitations[] @relation(name: "receiverRelation")

  sessionPlayers SessionPlayers[]

  evaluatorRating UserRatings[] @relation(name: "EvaluatorRelation")

  evaluatedRating UserRatings[] @relation(name: "EvaluatedRelation")

  userGlobalRatings  UserGlobalRatings[]
  emailVerifications EmailVerification[]
  userTokens         UserTokens[]
  refreshTokens      RefreshTokens[]

  @@schema("auth")
}

model EmailVerification {
  uid       String   @id @default(cuid())
  userUid   String   @map("user_uid")
  code      String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user Users @relation(fields: [userUid], references: [uid], onDelete: Cascade)

  @@map("Email_verification")
  @@schema("auth")
}

model UserTokens {
  uid       String   @id @default(cuid())
  userUid   String   @map("user_uid")
  deviceUid String?  @map("deviceUid")
  token     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user Users @relation(fields: [userUid], references: [uid])

  @@map("User_tokens")
  @@schema("auth")
}

model RefreshTokens {
  uid       String   @id @default(cuid())
  userUid   String   @map("user_uid")
  deviceUid String?  @map("deviceUid")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user Users @relation(fields: [userUid], references: [uid], onDelete: Cascade)

  @@map("Refresh_tokens")
  @@schema("auth")
}

model UserRatings {
  evaluatorUid String   @map("evaluator_uid")
  evaluatedUid String   @map("evaluated_uid")
  note1        Int      @map("note_1")
  note2        Int      @map("note_2")
  note3        Int      @map("note_3")
  note4        Int      @map("note_4")
  note5        Int      @map("note_5")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  evaluator Users @relation(fields: [evaluatorUid], references: [uid], name: "EvaluatorRelation")
  evaluated Users @relation(fields: [evaluatedUid], references: [uid], name: "EvaluatedRelation")

  @@id([evaluatorUid, evaluatedUid])
  @@unique([evaluatorUid, evaluatedUid])
  @@map("User_ratings")
  @@schema("ratings")
}

model UserGlobalRatings {
  userUid   String   @map("user_uid")
  sportName String   @map("sport_name")
  rating    Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  Users  @relation(fields: [userUid], references: [uid])
  sport Sports @relation(fields: [sportName], references: [name])

  @@unique([userUid, sportName])
  @@map("User_global_ratings")
  @@schema("ratings")
}

model Partners {
  uid                 String                @id @default(cuid())
  name                String
  imageUrl            String?               @map("image_url")
  address             String
  latitude            Float
  longitude           Float
  phone               String
  email               String
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  //todo: add stripe account uid
  fields              Fields[]
  partnerSports       PartnerSports[]
  partnerOpeningHours PartnerOpeningHours[]

  @@schema("infrastructure")
}

model PartnerOpeningHours {
  uid        String   @id @default(cuid())
  partnerUid String   @map("partner_uid")
  dayOfWeek  Int      @map("day_of_week")
  openTime   String   @map("open_time")
  closeTime  String   @map("close_time")
  isClosed   Boolean  @default(false) @map("is_closed")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  partner Partners @relation(fields: [partnerUid], references: [uid], onDelete: Cascade)

  @@unique([partnerUid, dayOfWeek])
  @@map("Partner_opening_hours")
  @@schema("infrastructure")
}

model PartnerSports {
  partnerUid String   @map("partner_uid")
  sport      String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  partner       Partners @relation(fields: [partnerUid], references: [uid])
  sportRelation Sports   @relation(fields: [sport], references: [name])

  @@unique([partnerUid, sport])
  @@map("Partner_sports")
  @@schema("infrastructure")
}

model Sports {
  uid       String   @id @default(cuid())
  name      String   @unique
  imageUrl  String?  @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  fields Fields[]

  userGlobalRatings UserGlobalRatings[]
  partnerSports     PartnerSports[]

  @@schema("infrastructure")
}

model Fields {
  uid        String     @id @default(cuid())
  sport      String
  partnerUid String     @map("partner_uid")
  name       String?
  address    String
  latitude   Float
  longitude  Float
  entryFee   Float      @map("entry_fee")
  gameMode   Game_modes @map("game_mode")

  fieldImages   FieldImages[]
  partner       Partners      @relation(fields: [partnerUid], references: [uid])
  sportRelation Sports        @relation(fields: [sport], references: [name])
  sessions      Sessions[]

  @@schema("infrastructure")
}

model FieldImages {
  uid       String   @id @default(cuid())
  fieldUid  String   @map("field_uid")
  url       String
  order     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  field Fields @relation(fields: [fieldUid], references: [uid])

  @@map("Field_images")
  @@schema("infrastructure")
}

model Sessions {
  uid               String     @id @default(cuid())
  fieldUid          String     @map("field_uid")
  title             String?
  startDate         DateTime   @map("start_date")
  endDate           DateTime   @map("end_date")
  sport             String
  gameMode          Game_modes @map("game_mode")
  // visibility        Visibility
  maxPlayersPerTeam Int        @map("max_players_per_team")
  teamsPerGame      Int        @map("teams_per_game")
  minPlayersPerTeam Int        @map("min_players_per_team")
  description       String?
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")

  sessionInvitations SessionInvitations[]

  sessionImages SessionImages[]

  sessionTeams SessionTeams[]

  sessionPlayers SessionPlayers[]
  field          Fields           @relation(fields: [fieldUid], references: [uid])

  @@schema("sessions")
}

model SessionInvitations {
  sessionUid  String            @map("session_uid")
  senderUid   String            @map("sender_uid")
  receiverUid String            @map("receiver_uid")
  status      Invitation_status @default(PENDING)
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  session  Sessions @relation(fields: [sessionUid], references: [uid])
  sender   Users    @relation(fields: [senderUid], references: [uid], name: "senderRelation")
  receiver Users    @relation(fields: [receiverUid], references: [uid], name: "receiverRelation")

  @@unique([sessionUid, senderUid, receiverUid])
  @@map("Session_invitations")
  @@schema("sessions")
}

model SessionImages {
  uid        String   @id @default(cuid())
  sessionUid String   @map("session_uid")
  url        String
  order      Int
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  session Sessions @relation(fields: [sessionUid], references: [uid])

  @@map("Session_images")
  @@schema("sessions")
}

model SessionTeams {
  uid        String     @id @default(cuid())
  sessionUid String     @map("session_uid")
  teamLabel  Team_label @map("team_label")
  teamName   String     @map("team_name")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  session Sessions @relation(fields: [sessionUid], references: [uid])

  sessionPlayers SessionPlayers[]

  @@unique([sessionUid, teamLabel])
  @@map("Session_teams")
  @@schema("sessions")
}

model SessionPlayers {
  sessionUid String   @map("session_uid")
  teamUid    String   @map("team_uid")
  userUid    String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  session Sessions     @relation(fields: [sessionUid], references: [uid])
  team    SessionTeams @relation(fields: [teamUid], references: [uid])
  user    Users        @relation(fields: [userUid], references: [uid])

  @@unique([sessionUid, teamUid, userUid])
  @@map("Session_players")
  @@schema("sessions")
}

model Conversations {
  uid                 String                @id @default(cuid())
  eventUid            String?               @map("event_uid")
  name                String?
  type                Conversation_type
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  // todo: image_url
  messages            Messages[]
  conversationMembers ConversationMembers[]

  conversationOptions ConversationOptions[]

  @@schema("social")
}

model Messages {
  uid             String         @id @default(cuid())
  conversationUid String         @map("conversation_uid")
  senderUid       String         @map("sender_uid")
  content         String
  status          Message_status @default(SENT)
  type            Message_type
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  sender       Users         @relation(fields: [senderUid], references: [uid])
  conversation Conversations @relation(fields: [conversationUid], references: [uid])

  @@schema("social")
}

model ConversationOptions {
  conversationUid String
  userUid         String
  isAdmin         Boolean  @default(false) @map("is_admin")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  archived        Boolean  @default(false)
  muted           Boolean  @default(false)
  deleted         Boolean  @default(false)

  user         Users         @relation(fields: [userUid], references: [uid])
  conversation Conversations @relation(fields: [conversationUid], references: [uid])

  @@unique([conversationUid, userUid])
  @@map("Conversation_options")
  @@schema("social")
}

model ConversationMembers {
  conversationUid String
  userUid         String
  isAdmin         Boolean @default(false) @map("is_admin")

  conversation Conversations @relation(fields: [conversationUid], references: [uid])
  user         Users         @relation(fields: [userUid], references: [uid])

  @@id([conversationUid, userUid])
  @@map("Conversation_members")
  @@schema("social")
}

model Friends {
  userUid1  String
  userUid2  String
  status    Invitation_status @map("status")
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")
  user1     Users             @relation("friend1", fields: [userUid1], references: [uid])
  user2     Users             @relation("friend2", fields: [userUid2], references: [uid])

  @@id([userUid1, userUid2])
  @@unique([userUid1, userUid2])
  @@schema("social")
}
