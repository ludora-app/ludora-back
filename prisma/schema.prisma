generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "ratings", "infrastructure", "sessions", "social", "shared"]
}

enum Provider {
  FACEBOOK
  GOOGLE
  LUDORA

  @@schema("auth")
}

enum Sex {
  MALE
  FEMALE
  OTHER

  @@schema("auth")
}

enum User_type {
  USER
  ADMIN

  @@schema("auth")
}

enum Invitation_status {
  PENDING
  ACCEPTED
  REJECTED

  @@schema("shared")
}

enum Team_label {
  A
  B

  @@schema("sessions")
}

enum Message_status {
  SENT
  DELIVERED
  READ

  @@schema("social")
}

enum Message_type {
  TEXT
  IMAGE
  VIDEO
  AUDIO

  @@schema("social")
}

enum Conversation_type {
  PRIVATE
  GROUP
  EVENT

  @@schema("social")
}

enum Game_modes {
  TWO_V_TWO
  THREE_V_THREE
  FOUR_V_FOUR
  FIVE_V_FIVE
  SIX_V_SIX
  SEVEN_V_SEVEN
  EIGHT_V_EIGHT
  TEN_V_TEN
  ELEVEN_V_ELEVEN

  @@schema("sessions")
}

model Users {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String?
  firstname       String?
  lastname        String?
  birthdate       DateTime?
  sex             Sex?      @map("sex")
  phone           String?
  imageUrl        String?   @map("image_url")
  bio             String?
  provider        Provider  @default(LUDORA)
  isConnected     Boolean   @default(true) @map("is_connected")
  stripeAccountId String?   @unique @map("stripe_account_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  emailVerified   Boolean   @default(false) @map("email_verified")
  type            User_type @default(USER) @map("type")

  Message             Messages[]
  // Event               Events[]
  Conversation_member Conversation_members[]
  // Get_notification    Get_notifications[]

  Friends_sent     Friends[] @relation("friend1")
  Friends_received Friends[] @relation("friend2")

  Conversation_options Conversation_options[]

  Session_invitations Session_invitations[]

  Session_players Session_players[]

  Evaluator_rating User_ratings[] @relation(name: "EvaluatorRelation")

  Evaluated_rating User_ratings[] @relation(name: "EvaluatedRelation")

  User_global_rating User_global_ratings[]
  Email_verification Email_verification[]

  User_tokens User_tokens[]

  @@schema("auth")
}

model Email_verification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  code      String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("auth")
}

model User_tokens {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  deviceId  String?  @map("deviceId")
  token     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user Users @relation(fields: [userId], references: [id])

  @@schema("auth")
}

model User_ratings {
  evaluatorId String   @map("evaluator_id")
  evaluatedId String   @map("evaluated_id")
  note1       Int      @map("note_1")
  note2       Int      @map("note_2")
  note3       Int      @map("note_3")
  note4       Int      @map("note_4")
  note5       Int      @map("note_5")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  evaluator Users @relation(fields: [evaluatorId], references: [id], name: "EvaluatorRelation")
  evaluated Users @relation(fields: [evaluatedId], references: [id], name: "EvaluatedRelation")

  @@id([evaluatorId, evaluatedId])
  @@schema("ratings")
}

model User_global_ratings {
  userId    String   @map("user_id")
  sportName String   @map("sport_name")
  rating    Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  Users  @relation(fields: [userId], references: [id])
  sport Sports @relation(fields: [sportName], references: [name])

  @@id([userId, sportName])
  @@schema("ratings")
}

model Partners {
  id                    String                  @id @default(cuid())
  name                  String
  imageUrl              String?                 @map("image_url")
  address               String
  latitude              Float
  longitude             Float
  phone                 String
  email                 String
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  //todo: add stripe account id
  Fields                Fields[]
  Partner_sports        Partner_sports[]
  Partner_opening_hours Partner_opening_hours[]

  @@schema("infrastructure")
}

model Partner_opening_hours {
  id        String   @id @default(cuid())
  partnerId String   @map("partner_id")
  dayOfWeek Int      @map("day_of_week")
  openTime  String   @map("open_time")
  closeTime String   @map("close_time")
  isClosed  Boolean  @default(false) @map("is_closed")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  partner Partners @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@unique([partnerId, dayOfWeek])
  @@schema("infrastructure")
}

model Partner_sports {
  partnerId String   @map("partner_id")
  sport     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  partner        Partners @relation(fields: [partnerId], references: [id])
  sport_relation Sports   @relation(fields: [sport], references: [name])

  @@id([partnerId, sport])
  @@schema("infrastructure")
}

model Sports {
  id        String   @id @default(cuid())
  name      String   @unique
  imageUrl  String?  @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Fields Fields[]

  User_global_rating User_global_ratings[]
  Partner_sports     Partner_sports[]

  @@schema("infrastructure")
}

model Fields {
  id        String     @id @default(cuid())
  sport     String
  partnerId String     @map("partner_id")
  name      String?
  address   String
  latitude  Float
  longitude Float
  entryFee  Float      @map("entry_fee")
  gameMode  Game_modes @map("game_mode")

  Field_images   Field_images[]
  partner        Partners       @relation(fields: [partnerId], references: [id])
  sport_relation Sports         @relation(fields: [sport], references: [name])
  sessions       Sessions[]

  @@schema("infrastructure")
}

model Field_images {
  id        String   @id @default(cuid())
  fieldId   String   @map("field_id")
  url       String
  order     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  field Fields @relation(fields: [fieldId], references: [id])

  @@schema("infrastructure")
}

model Sessions {
  id                String     @id @default(cuid())
  fieldId           String     @map("field_id")
  title             String?
  startDate         DateTime   @map("start_date")
  endDate           DateTime   @map("end_date")
  sport             String
  gameMode          Game_modes @map("game_mode")
  // visibility        Visibility
  maxPlayersPerTeam Int        @map("max_players_per_team")
  teamsPerGame      Int        @map("teams_per_game")
  minPlayersPerTeam Int        @map("min_players_per_team")
  description       String?
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")

  Session_invitations Session_invitations[]

  Session_images Session_images[]

  Session_teams Session_teams[]

  Session_players Session_players[]
  field           Fields            @relation(fields: [fieldId], references: [id])

  @@schema("sessions")
}

model Session_invitations {
  sessionId String            @map("session_id")
  userId    String
  status    Invitation_status @default(PENDING)
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")

  session Sessions @relation(fields: [sessionId], references: [id])
  user    Users    @relation(fields: [userId], references: [id])

  @@id([sessionId, userId])
  @@schema("sessions")
}

model Session_images {
  id        String   @id @default(cuid())
  sessionId String   @map("session_id")
  url       String
  order     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  session Sessions @relation(fields: [sessionId], references: [id])

  @@schema("sessions")
}

model Session_teams {
  id        String     @id @default(cuid())
  sessionId String     @map("session_id")
  teamLabel Team_label @map("team_label")
  teamName  String     @map("team_name")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  session Sessions @relation(fields: [sessionId], references: [id])

  Session_players Session_players[]

  @@schema("sessions")
}

model Session_players {
  sessionId String   @map("session_id")
  teamId    String   @map("team_id")
  userId    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  session Sessions      @relation(fields: [sessionId], references: [id])
  team    Session_teams @relation(fields: [teamId], references: [id])
  user    Users         @relation(fields: [userId], references: [id])

  @@id([sessionId, teamId, userId])
  @@schema("sessions")
}

model Conversations {
  id                  String                 @id @default(cuid())
  eventId             String?                @map("event_id")
  name                String?
  type                Conversation_type
  createdAt           DateTime               @default(now()) @map("created_at")
  updatedAt           DateTime               @updatedAt @map("updated_at")
  // todo: image_url
  Message             Messages[]
  Conversation_member Conversation_members[]

  Conversation_options Conversation_options[]

  @@schema("social")
}

model Messages {
  id             String         @id @default(cuid())
  conversationId String         @map("conversation_id")
  senderId       String         @map("sender_id")
  content        String
  status         Message_status @default(SENT)
  type           Message_type
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  sender       Users         @relation(fields: [senderId], references: [id])
  conversation Conversations @relation(fields: [conversationId], references: [id])

  @@schema("social")
}

model Conversation_options {
  conversationId String
  userId         String
  isAdmin        Boolean  @default(false) @map("is_admin")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  archived       Boolean  @default(false)
  muted          Boolean  @default(false)
  deleted        Boolean  @default(false)

  user         Users         @relation(fields: [userId], references: [id])
  conversation Conversations @relation(fields: [conversationId], references: [id])

  @@unique([conversationId, userId])
  @@schema("social")
}

model Conversation_members {
  conversationId String
  userId         String
  isAdmin        Boolean @default(false) @map("is_admin")

  conversation Conversations @relation(fields: [conversationId], references: [id])
  user         Users         @relation(fields: [userId], references: [id])

  @@id([conversationId, userId])
  @@schema("social")
}

model Friends {
  userId1   String
  userId2   String
  status    Invitation_status @map("status")
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")
  user1     Users             @relation("friend1", fields: [userId1], references: [id])
  user2     Users             @relation("friend2", fields: [userId2], references: [id])

  @@id([userId1, userId2])
  @@unique([userId1, userId2])
  @@schema("social")
}
